// autogenerated with `swagspotta`, do not edit directly.
import { isNil as _isNil, map as _map, extend as _extend } from 'lodash';
import { prettyBytes, unPrettyBytes } from '@/util/pretty';

// IsLibraryPushRef returns true if the provided string is a valid library
// reference for a push operation.
// taken from scs-library-client src/client/util.go
// see https://github.com/sylabs/scs-library-client/blob/master/client/util.go#L36
export function isRefPart(name: string): boolean {
  const re = new RegExp("^[a-z0-9]+(?:[._-][a-z0-9]+)*$");
  return re.test(name);
}
export function checkName(name: string): boolean | string {
  return isRefPart(name) ? true :
    'Invalid name: can only contain lower case characters, numbers, -, _ or .'
}

{% for class in classes -%}
{{class}}
{% endfor %}

interface AdmBase {
  job: number;
  started: Date | null;
  finished: Date | null;
  success: boolean;
  exception: string;
  scheduled: Date | null;
}

export interface AdmLdapSyncResults extends AdmBase {
  synced: string[];
  conflict: string[];
  failed: string[];
}

export interface AdmExpireImagesResults extends AdmBase {
  updated: number;
  space_reclaimed: number;
}

export interface AdmUpdateQuotasResults extends AdmBase {
  updated: number;
  total_space: number;
}

function plainToAdmBase(json: any): AdmBase {
  return {
    job: json['job'],
    started: json['started'] ? new Date(json['started']) : null,
    finished: json['finished'] ? new Date(json['finished']) : null,
    success: json['success'],
    exception: json['exception'],
    scheduled: json['scheduled'] ? new Date(json['scheduled']) : null,
  }
}

export function plainToAdmLdapSyncResults(json: any): AdmLdapSyncResults {
  return _extend(plainToAdmBase(json), {
    synced: json['synced'],
    conflict: json['conflict'],
    failed: json['failed'],
  });
}

export function plainToAdmExpireImagesResults(json: any): AdmExpireImagesResults {
  return _extend(plainToAdmBase(json), {
    updated: json['updated'],
    space_reclaimed: json['space_reclaimed'],
  });
}

export function plainToAdmUpdateQuotasResults(json: any): AdmUpdateQuotasResults {
  return _extend(plainToAdmBase(json), {
    updated: json['updated'],
    total_space: json['total_space'],
  });
}

export interface AdmKey {
  key: string;
  val: AdmLdapSyncResults;
}


export interface UploadTag {
  name: string;
  arch: string;
  imageType: string;
  manifestType: string;
}

export interface Upload {
  tags: UploadTag[];
  container: Container;
}

export function plainToUpload(json: any): Upload {
  return {
    tags: json.tags,
    container: plainToContainer(json.container),
  };
}

export interface UserQuery {
  username?: string;
}

export interface SearchQuery {
  name?: string;
  description?: string;
}

export interface SearchResult {
  entity: Entity[];
  collection: Collection[];
  container: Container[];
  image: Image[];
}

export function plainToSearchResult(json: any): SearchResult {
  return {
    entity: _map(json.entity, plainToEntity),
    collection: _map(json.collection, plainToCollection),
    container: _map(json.container, plainToContainer),
    image: _map(json.image, plainToImage),
  };
}
